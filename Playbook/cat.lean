import Mathlib
/--
The Category typeclass is defined in Mathlib.CategoryTheory.Category.Basic. It depends on the type of the objects, so for example we might write Category (Type u) if we're talking about a category whose objects are types (in universe u).

- Functors (which are a structure, not a typeclass) are defined in Mathlib.CategoryTheory.Functor.Basic, along with identity functors and functor composition.

- Natural transformations, and their compositions, are defined in Mathlib.CategoryTheory.NatTrans.

- The category of functors and natural transformations between fixed categories C and D is defined in Mathlib.CategoryTheory.Functor.Category.

- Cartesian products of categories, functors, and natural transformations appear in Mathlib.CategoryTheory.Products.Basic.

- The category of types, and the hom pairing functor, are defined in Mathlib.CategoryTheory.Types.

## Notation
### Categories
We use the ‚ü∂ (\hom) arrow to denote sets of morphisms, as in X ‚ü∂ Y. This leaves the actual category implicit; it is inferred from the type of X and Y by typeclass inference.

We use ùüô (\b1) to denote identity morphisms, as in ùüô X.

We use ‚â´ (\gg) to denote composition of morphisms, as in f ‚â´ g, which means "f followed by g". You may prefer write composition in the usual convention, using ‚äö (\oo or \circledcirc), as in f ‚äö g which means "g followed by f". To do so you'll need to add this notation locally, via

local notation f ` ‚äö `:80 g:80 := category.comp g f
### Isomorphisms
We use ‚âÖ for isomorphisms.

### Functors
We use ‚•§ (\func) to denote functors, as in C ‚•§ D for the type of functors from C to D.

We use F.obj X to denote the action of a functor on an object. We use F.map f to denote the action of a functor on a morphism`.

Functor composition can be written as F ‚ãô G.

### Natural transformations
We use œÑ.app X for the components of a natural transformation.

Otherwise, we mostly use the notation for morphisms in any category:

We use F ‚ü∂ G (\hom or -->) to denote the type of natural transformations, between functors F and G. We use F ‚âÖ G (\iso) to denote the type of natural isomorphisms.

For vertical composition of natural transformations we just use ‚â´. For horizontal composition, use hcomp.
-/
def help := ()

section ¬´1.1.1¬ª
open Function
variable [Nontrivial X] [Nontrivial Y] [Nontrivial Z]
variable {x : X} {y : Y} {z : Z}
def Monic (f : X -> Y) := ‚àÄ (g h : Z -> X), (f ‚àò g = f ‚àò h) -> g = h
def Epic  (f : X -> Y) := ‚àÄ (g h : Y -> Z), (g ‚àò f = h ‚àò f) -> g = h
example {f : X -> Y} : Injective f <-> Monic f (Z := Z) := by
  constructor <;> intro h'
  intros g h h''
  have : ‚àÄz, f (g z) = f (h z) := fun z => by
    calc _ = comp f g z := by rfl
         _ = comp f h z := by rw[h'']
  have : ‚àÄz, g z = h z := fun z => h' $ this z
  apply funext this
  next =>
    intro x y h
    unfold Monic at h'
    let F : ‚àÄ x : X, Z -> X := fun x => fun _ => x
    have H : ‚àÄx z, F x z = x := by simp[F]
    have : ‚àÄ x x' : X, f ‚àò (F x) = f ‚àò (F x') -> (F x) = (F x') :=
      fun x x' a => h' (F x) (F x') $ a
    have := this x y
    have hx := H x
    have hy := H y
    have := this $ by
      funext z'
      simp; rw[hx z', hy z']
      exact h
    rw[<- hx z, <- hy z]
    rw[this]
open Classical in
example {f : X -> Y} : Surjective f <-> Epic f (Z := Z) := by
  constructor <;> intro h‚ÇÅ <;> unfold Surjective Epic at *
  case mp =>
    intro g h h‚ÇÇ
    funext y
    have ‚ü®a, eq‚ü© := h‚ÇÅ y
    have H : ‚àÄ x, comp g f x = comp h f x := Œª x => by rw[h‚ÇÇ]
    simp at H
    exact eq ‚ñ∏ H a
  next =>
    have ‚ü®z, z', neq‚ü© := exists_pair_ne Z
    intro b
    let g := Œª (_ : Y) => z
    let h := (if ¬∑ = b then z' else z)
    by_contra! nh
    have h' : g ‚àò f = h ‚àò f := by
      funext y
      simp[g, h, nh]
    have := h‚ÇÅ g h h'
    have : g ‚â† h := by
      have : g b ‚â† h b := by simpa[g, h]
      exact ne_iff.mpr ‚ü®b, this‚ü©
    contradiction
end ¬´1.1.1¬ª

section ¬´1.1¬ª
open CategoryTheory
variable [instC : Category ùíû] {A B C : ùíû}

example
  [Group G]
  [Group H]
  (f : G -> H)
  (h‚ÇÅ : ‚àÄ g‚ÇÅ g‚ÇÇ, f (g‚ÇÅ * g‚ÇÇ) = f g‚ÇÅ * f g‚ÇÇ)
  (h‚ÇÇ : f 1 = 1) : (‚àÄm‚ÇÅ m‚ÇÇ : G, f (m‚ÇÅ * m‚ÇÇ) = f m‚ÇÅ * f m‚ÇÇ) ‚àß f 1 = 1 :=
    ‚ü®Œª m‚ÇÅ m‚ÇÇ => h‚ÇÅ m‚ÇÅ m‚ÇÇ, h‚ÇÇ‚ü©

example {f : A ‚ü∂ B} {g : B ‚ü∂ C} (h : Mono (f ‚â´ g)) : Mono f where
  right_cancellation := Œª g' h' H => by
    have := h.right_cancellation g' h'
    rw[<- instC.assoc, <- instC.assoc, H] at this
    exact this rfl

example {f : A ‚ü∂ B} (sf : SplitEpi f) : Epi f where
  left_cancellation g h H := by
    have := sf.section_ ‚â´= H
    have eq := sf.id
    repeat rw[<- instC.assoc, eq, instC.id_comp] at this
    assumption

example {f : A ‚ü∂ B} {g : B ‚ü∂ C} [h‚ÇÅ : IsIso f] [h‚ÇÇ : IsIso $ f ‚â´ g] : IsIso g where
  out := by
    have ‚ü®inv‚ÇÅ, id‚ÇÅ, id‚ÇÅ'‚ü© := h‚ÇÅ.out
    have ‚ü®inv‚ÇÇ, id‚ÇÇ, id‚ÇÇ'‚ü© := h‚ÇÇ.out
    use inv‚ÇÇ ‚â´ f
    rw[<-instC.assoc] at id‚ÇÇ'
    refine ‚ü®?_, id‚ÇÇ'‚ü©
    simp at id‚ÇÇ
    calc
      _ = ùüô B ‚â´ g ‚â´ inv‚ÇÇ ‚â´ f := by simp
      _ = inv‚ÇÅ ‚â´ (f ‚â´ g ‚â´ inv‚ÇÇ) ‚â´ f := by rw[<- id‚ÇÅ']; simp
      _ = inv‚ÇÅ ‚â´ ùüô A ‚â´ f := by rw[id‚ÇÇ]
      _ = ùüô B := by rw[instC.id_comp, <- id‚ÇÅ'];

example {f : A ‚ü∂ B} [h‚ÇÅ : Mono f] (h‚ÇÇ : SplitEpi f) : IsIso f where
  out := ‚ü®h‚ÇÇ.section_, by simp[h‚ÇÅ.right_cancellation (f ‚â´ h‚ÇÇ.section_) (ùüô A)], h‚ÇÇ.id‚ü©

end ¬´1.1¬ª
